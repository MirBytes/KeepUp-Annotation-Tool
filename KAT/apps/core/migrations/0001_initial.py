# Generated by Django 4.2.16 on 2025-04-26 10:12

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
                ('first_name', models.CharField(max_length=150)),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_id', models.IntegerField(blank=True, db_column='post-id', null=True)),
                ('commenttext', models.TextField(blank=True, null=True)),
                ('commenter_name', models.TextField(blank=True, db_column='commenter name', null=True)),
                ('likescount_on_comment', models.FloatField(blank=True, db_column='likescount on comment', null=True)),
                ('comment_label', models.TextField(blank=True, db_column='comment label', null=True)),
                ('label', models.TextField(blank=True, db_column='Label', null=True)),
            ],
            options={
                'db_table': 'comments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
                ('action_time', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.FloatField(blank=True, db_column='student id', null=True)),
                ('student_name', models.TextField(blank=True, db_column='Student name', null=True)),
                ('event_id', models.TextField(blank=True, db_column='Event-id', null=True)),
                ('event_name', models.TextField(blank=True, db_column='Event Name', null=True)),
                ('claim', models.TextField(blank=True, null=True)),
                ('claim_url', models.TextField(blank=True, db_column='claim-url', null=True)),
                ('posturl', models.TextField(blank=True, null=True)),
                ('label', models.IntegerField(blank=True, null=True)),
                ('unnamed_8', models.FloatField(blank=True, db_column='Unnamed: 8', null=True)),
                ('unnamed_9', models.FloatField(blank=True, db_column='Unnamed: 9', null=True)),
                ('unnamed_10', models.FloatField(blank=True, db_column='Unnamed: 10', null=True)),
                ('unnamed_11', models.FloatField(blank=True, db_column='Unnamed: 11', null=True)),
                ('unnamed_12', models.FloatField(blank=True, db_column='Unnamed: 12', null=True)),
                ('unnamed_13', models.TextField(blank=True, db_column='Unnamed: 13', null=True)),
            ],
            options={
                'db_table': 'Events',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PostFeatures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.TextField(blank=True, db_column='Event-id', null=True)),
                ('post_id', models.IntegerField(blank=True, db_column='post-id', null=True)),
                ('post_url', models.TextField(blank=True, db_column='post-url', null=True)),
                ('platform', models.TextField(blank=True, null=True)),
                ('post_title', models.TextField(blank=True, db_column='post-title', null=True)),
                ('post_label', models.TextField(blank=True, db_column='post-label', null=True)),
                ('image_image_0_video_1_if_no_image_video_2_field', models.IntegerField(blank=True, db_column='image(image 0, video 1, if no image video 2)', null=True)),
                ('likescount', models.TextField(blank=True, null=True)),
                ('timestamp', models.TextField(blank=True, null=True)),
                ('commentscount', models.IntegerField(blank=True, null=True)),
                ('views', models.TextField(blank=True, null=True)),
                ('shares', models.TextField(blank=True, null=True)),
                ('reposts', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'post_features',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserFeatures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_id', models.IntegerField(blank=True, db_column='post-id', null=True)),
                ('username', models.TextField(blank=True, null=True)),
                ('followers', models.TextField(blank=True, null=True)),
                ('followings', models.TextField(blank=True, null=True)),
                ('is_user_verified_0_verified_1_unverified_field', models.IntegerField(blank=True, db_column='is user verified(0 verified, 1 unverified)', null=True)),
                ('profile_pic_url', models.TextField(blank=True, db_column='profile pic url', null=True)),
                ('posts_count', models.TextField(blank=True, db_column='posts count', null=True)),
                ('joining_date', models.TextField(blank=True, db_column='joining date', null=True)),
            ],
            options={
                'db_table': 'user_features',
                'managed': False,
            },
        ),
    ]
